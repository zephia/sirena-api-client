<?php
/**
 * Interaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers and prospect data manipulation
 *
 * OpenAPI spec version: 1.5.0
 * Contact: it@getsirena.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Interaction Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Interaction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Interaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '\Swagger\Client\Model\ObjectId',
        'agent_id' => '\Swagger\Client\Model\ObjectId',
        'prospect_id' => '\Swagger\Client\Model\ObjectId',
        'created_at' => '\DateTime',
        'due_at' => '\DateTime',
        'started_at' => '\DateTime',
        'finished_at' => '\DateTime',
        'status' => 'string',
        'proactive' => 'bool',
        'output' => '\Swagger\Client\Model\InteractionOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'agent_id' => null,
        'prospect_id' => null,
        'created_at' => 'date-time',
        'due_at' => 'date-time',
        'started_at' => 'date-time',
        'finished_at' => 'date-time',
        'status' => null,
        'proactive' => null,
        'output' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'agent_id' => 'agentId',
        'prospect_id' => 'prospectId',
        'created_at' => 'createdAt',
        'due_at' => 'dueAt',
        'started_at' => 'startedAt',
        'finished_at' => 'finishedAt',
        'status' => 'status',
        'proactive' => 'proactive',
        'output' => 'output'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'agent_id' => 'setAgentId',
        'prospect_id' => 'setProspectId',
        'created_at' => 'setCreatedAt',
        'due_at' => 'setDueAt',
        'started_at' => 'setStartedAt',
        'finished_at' => 'setFinishedAt',
        'status' => 'setStatus',
        'proactive' => 'setProactive',
        'output' => 'setOutput'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'agent_id' => 'getAgentId',
        'prospect_id' => 'getProspectId',
        'created_at' => 'getCreatedAt',
        'due_at' => 'getDueAt',
        'started_at' => 'getStartedAt',
        'finished_at' => 'getFinishedAt',
        'status' => 'getStatus',
        'proactive' => 'getProactive',
        'output' => 'getOutput'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['prospect_id'] = isset($data['prospect_id']) ? $data['prospect_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['due_at'] = isset($data['due_at']) ? $data['due_at'] : null;
        $this->container['started_at'] = isset($data['started_at']) ? $data['started_at'] : null;
        $this->container['finished_at'] = isset($data['finished_at']) ? $data['finished_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['proactive'] = isset($data['proactive']) ? $data['proactive'] : null;
        $this->container['output'] = isset($data['output']) ? $data['output'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param \Swagger\Client\Model\ObjectId $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets agent_id
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     * @param \Swagger\Client\Model\ObjectId $agent_id
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets prospect_id
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getProspectId()
    {
        return $this->container['prospect_id'];
    }

    /**
     * Sets prospect_id
     * @param \Swagger\Client\Model\ObjectId $prospect_id
     * @return $this
     */
    public function setProspectId($prospect_id)
    {
        $this->container['prospect_id'] = $prospect_id;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets due_at
     * @return \DateTime
     */
    public function getDueAt()
    {
        return $this->container['due_at'];
    }

    /**
     * Sets due_at
     * @param \DateTime $due_at
     * @return $this
     */
    public function setDueAt($due_at)
    {
        $this->container['due_at'] = $due_at;

        return $this;
    }

    /**
     * Gets started_at
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     * @param \DateTime $started_at
     * @return $this
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets finished_at
     * @return \DateTime
     */
    public function getFinishedAt()
    {
        return $this->container['finished_at'];
    }

    /**
     * Sets finished_at
     * @param \DateTime $finished_at
     * @return $this
     */
    public function setFinishedAt($finished_at)
    {
        $this->container['finished_at'] = $finished_at;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets proactive
     * @return bool
     */
    public function getProactive()
    {
        return $this->container['proactive'];
    }

    /**
     * Sets proactive
     * @param bool $proactive Specifies if the interaction was started by the agent (proactive interaction) or not
     * @return $this
     */
    public function setProactive($proactive)
    {
        $this->container['proactive'] = $proactive;

        return $this;
    }

    /**
     * Gets output
     * @return \Swagger\Client\Model\InteractionOutput
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     * @param \Swagger\Client\Model\InteractionOutput $output
     * @return $this
     */
    public function setOutput($output)
    {
        $this->container['output'] = $output;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


