<?php
/**
 * InteractionOutputConversations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers and prospect data manipulation
 *
 * OpenAPI spec version: 1.5.0
 * Contact: it@getsirena.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InteractionOutputConversations Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InteractionOutputConversations implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InteractionOutput_conversations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => '\Swagger\Client\Model\ObjectId',
        'channel' => 'string',
        'provider_name' => 'string',
        'thread_title' => 'string',
        'thread_subtitle' => 'string',
        'thread_thumbnail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'channel' => null,
        'provider_name' => null,
        'thread_title' => null,
        'thread_subtitle' => null,
        'thread_thumbnail' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'channel' => 'channel',
        'provider_name' => 'providerName',
        'thread_title' => 'threadTitle',
        'thread_subtitle' => 'threadSubtitle',
        'thread_thumbnail' => 'threadThumbnail'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'channel' => 'setChannel',
        'provider_name' => 'setProviderName',
        'thread_title' => 'setThreadTitle',
        'thread_subtitle' => 'setThreadSubtitle',
        'thread_thumbnail' => 'setThreadThumbnail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'channel' => 'getChannel',
        'provider_name' => 'getProviderName',
        'thread_title' => 'getThreadTitle',
        'thread_subtitle' => 'getThreadSubtitle',
        'thread_thumbnail' => 'getThreadThumbnail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['thread_title'] = isset($data['thread_title']) ? $data['thread_title'] : null;
        $this->container['thread_subtitle'] = isset($data['thread_subtitle']) ? $data['thread_subtitle'] : null;
        $this->container['thread_thumbnail'] = isset($data['thread_thumbnail']) ? $data['thread_thumbnail'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _id
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param \Swagger\Client\Model\ObjectId $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets channel
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     * @param string $channel
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets provider_name
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     * @param string $provider_name
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets thread_title
     * @return string
     */
    public function getThreadTitle()
    {
        return $this->container['thread_title'];
    }

    /**
     * Sets thread_title
     * @param string $thread_title
     * @return $this
     */
    public function setThreadTitle($thread_title)
    {
        $this->container['thread_title'] = $thread_title;

        return $this;
    }

    /**
     * Gets thread_subtitle
     * @return string
     */
    public function getThreadSubtitle()
    {
        return $this->container['thread_subtitle'];
    }

    /**
     * Sets thread_subtitle
     * @param string $thread_subtitle
     * @return $this
     */
    public function setThreadSubtitle($thread_subtitle)
    {
        $this->container['thread_subtitle'] = $thread_subtitle;

        return $this;
    }

    /**
     * Gets thread_thumbnail
     * @return string
     */
    public function getThreadThumbnail()
    {
        return $this->container['thread_thumbnail'];
    }

    /**
     * Sets thread_thumbnail
     * @param string $thread_thumbnail
     * @return $this
     */
    public function setThreadThumbnail($thread_thumbnail)
    {
        $this->container['thread_thumbnail'] = $thread_thumbnail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


