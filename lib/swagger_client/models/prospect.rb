=begin
#Sirena API

#Sirena API for lead providers and prospect data manipulation

OpenAPI spec version: 1.5.0
Contact: it@getsirena.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class Prospect
    attr_accessor :id

    attr_accessor :created

    attr_accessor :group

    attr_accessor :first_name

    attr_accessor :last_name

    # The unique name identifier of the prospect category
    attr_accessor :category

    # The prospect status
    attr_accessor :status

    attr_accessor :phones

    attr_accessor :emails

    # Additional and private data of the prospect. Only returned when the scope prospects:readAdditionalData is authorized
    attr_accessor :additional_data

    attr_accessor :leads

    attr_accessor :agent

    attr_accessor :assigned

    attr_accessor :next_reminder


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'group' => :'group',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'category' => :'category',
        :'status' => :'status',
        :'phones' => :'phones',
        :'emails' => :'emails',
        :'additional_data' => :'additionalData',
        :'leads' => :'leads',
        :'agent' => :'agent',
        :'assigned' => :'assigned',
        :'next_reminder' => :'nextReminder'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'ObjectId',
        :'created' => :'DateTime',
        :'group' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'category' => :'String',
        :'status' => :'String',
        :'phones' => :'Array<String>',
        :'emails' => :'Array<String>',
        :'additional_data' => :'Object',
        :'leads' => :'Array<LeadData>',
        :'agent' => :'Agent',
        :'assigned' => :'DateTime',
        :'next_reminder' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'phones')
        if (value = attributes[:'phones']).is_a?(Array)
          self.phones = value
        end
      end

      if attributes.has_key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.has_key?(:'additionalData')
        self.additional_data = attributes[:'additionalData']
      end

      if attributes.has_key?(:'leads')
        if (value = attributes[:'leads']).is_a?(Array)
          self.leads = value
        end
      end

      if attributes.has_key?(:'agent')
        self.agent = attributes[:'agent']
      end

      if attributes.has_key?(:'assigned')
        self.assigned = attributes[:'assigned']
      end

      if attributes.has_key?(:'nextReminder')
        self.next_reminder = attributes[:'nextReminder']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @created.nil?
        invalid_properties.push("invalid value for 'created', created cannot be nil.")
      end

      if @group.nil?
        invalid_properties.push("invalid value for 'group', group cannot be nil.")
      end

      if @first_name.nil?
        invalid_properties.push("invalid value for 'first_name', first_name cannot be nil.")
      end

      if @status.nil?
        invalid_properties.push("invalid value for 'status', status cannot be nil.")
      end

      if @leads.nil?
        invalid_properties.push("invalid value for 'leads', leads cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created.nil?
      return false if @group.nil?
      return false if @first_name.nil?
      return false if @status.nil?
      return false if @leads.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          group == o.group &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          category == o.category &&
          status == o.status &&
          phones == o.phones &&
          emails == o.emails &&
          additional_data == o.additional_data &&
          leads == o.leads &&
          agent == o.agent &&
          assigned == o.assigned &&
          next_reminder == o.next_reminder
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, created, group, first_name, last_name, category, status, phones, emails, additional_data, leads, agent, assigned, next_reminder].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
