=begin
#Sirena API

#Sirena API for lead providers and prospect data manipulation

OpenAPI spec version: 1.5.0
Contact: it@getsirena.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class VehicleProduct
    # A product make is either the name of its manufacturer or, if the manufacturer has more than one operating unit, the commercial name (brand) of that unit. 
    attr_accessor :make

    # A product model is the specific brand identified by a name or number. 
    attr_accessor :model

    # A product detail specific information for a product item
    attr_accessor :detail

    # A stock keeping unit (SKU) is a product and service identification code for a store or product, often portrayed as a machine-readable bar code that helps track the item for inventory. 
    attr_accessor :sku

    attr_accessor :price

    # The vehicle production year is the calendar year of production of that specific vehicle.
    attr_accessor :model_year

    # A vehicle production year for a vehicle model is the calendar year designation assigned by the manufacturer to the annual version of that model.
    attr_accessor :production_year

    # A vehicle trim level further identifies a vehicle by a particular set of special features. Higher trim levels either will add to the features of the \"base\" (entry-level model), or replace them with something else. Trim levels are designated by terms such as EX, LTZ, Touring and Grand Touring, among countless others.
    attr_accessor :trim_level

    # A vehicle style includes additional vehicle data like the engine, transmission, colors, options.
    attr_accessor :style

    # The type of fuel the vehicle uses. - **Gasoline**, also known as **petrol**, is a petroleum-derived liquid fuel. - **Diesel** is a petroleum-derived liquid fuel with higher energy density than gasoline. Alternatively it can be blended with **biodiesel** manufactured from vegetable oils, animal fats, or recycled cooking grease. - **Flex** is gasoline blended with ethanol made from corn and other plant materials. - **Hybrid** vehicles use electricity in conjunction with other fuels to boost efficiency. - **Electric** plug-in vehicles use electricity without needing other fuels. - **Hydrogen** is a potentially emissions-free alternative fuel. - **Natural Gas** (CNG) is a gaseous fuel that consists mostly of methane. - **Propane**, also known as liquefied petroleum gas (LPG) or propane **autogas**, is a gaseous fuel produced as a by-product of natural gas processing and crude oil refining. 
    attr_accessor :fuel_type

    # VIN number of the vehicle.
    attr_accessor :vim

    # The registration plate of the vehicle, also known as licence plate or number plate. For secondhand vehicles only.
    attr_accessor :registration_plate

    attr_accessor :odometer

    # A vehicle the buyer is trading in as part of the deal.
    attr_accessor :trade_in_vehicle

    attr_accessor :finance

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'make' => :'make',
        :'model' => :'model',
        :'detail' => :'detail',
        :'sku' => :'sku',
        :'price' => :'price',
        :'model_year' => :'modelYear',
        :'production_year' => :'productionYear',
        :'trim_level' => :'trimLevel',
        :'style' => :'style',
        :'fuel_type' => :'fuelType',
        :'vim' => :'vim',
        :'registration_plate' => :'registrationPlate',
        :'odometer' => :'odometer',
        :'trade_in_vehicle' => :'tradeInVehicle',
        :'finance' => :'finance'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'make' => :'String',
        :'model' => :'String',
        :'detail' => :'String',
        :'sku' => :'String',
        :'price' => :'MoneyAmount',
        :'model_year' => :'String',
        :'production_year' => :'String',
        :'trim_level' => :'String',
        :'style' => :'String',
        :'fuel_type' => :'String',
        :'vim' => :'String',
        :'registration_plate' => :'String',
        :'odometer' => :'Odometer',
        :'trade_in_vehicle' => :'String',
        :'finance' => :'Finance'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'detail')
        self.detail = attributes[:'detail']
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'modelYear')
        self.model_year = attributes[:'modelYear']
      end

      if attributes.has_key?(:'productionYear')
        self.production_year = attributes[:'productionYear']
      end

      if attributes.has_key?(:'trimLevel')
        self.trim_level = attributes[:'trimLevel']
      end

      if attributes.has_key?(:'style')
        self.style = attributes[:'style']
      end

      if attributes.has_key?(:'fuelType')
        self.fuel_type = attributes[:'fuelType']
      end

      if attributes.has_key?(:'vim')
        self.vim = attributes[:'vim']
      end

      if attributes.has_key?(:'registrationPlate')
        self.registration_plate = attributes[:'registrationPlate']
      end

      if attributes.has_key?(:'odometer')
        self.odometer = attributes[:'odometer']
      end

      if attributes.has_key?(:'tradeInVehicle')
        self.trade_in_vehicle = attributes[:'tradeInVehicle']
      end

      if attributes.has_key?(:'finance')
        self.finance = attributes[:'finance']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      fuel_type_validator = EnumAttributeValidator.new('String', ["gasoline", "diesel", "flex", "hybrid", "electric", "hydrogen", "naturalGas", "propane"])
      return false unless fuel_type_validator.valid?(@fuel_type)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fuel_type Object to be assigned
    def fuel_type=(fuel_type)
      validator = EnumAttributeValidator.new('String', ["gasoline", "diesel", "flex", "hybrid", "electric", "hydrogen", "naturalGas", "propane"])
      unless validator.valid?(fuel_type)
        fail ArgumentError, "invalid value for 'fuel_type', must be one of #{validator.allowable_values}."
      end
      @fuel_type = fuel_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          make == o.make &&
          model == o.model &&
          detail == o.detail &&
          sku == o.sku &&
          price == o.price &&
          model_year == o.model_year &&
          production_year == o.production_year &&
          trim_level == o.trim_level &&
          style == o.style &&
          fuel_type == o.fuel_type &&
          vim == o.vim &&
          registration_plate == o.registration_plate &&
          odometer == o.odometer &&
          trade_in_vehicle == o.trade_in_vehicle &&
          finance == o.finance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [make, model, detail, sku, price, model_year, production_year, trim_level, style, fuel_type, vim, registration_plate, odometer, trade_in_vehicle, finance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
