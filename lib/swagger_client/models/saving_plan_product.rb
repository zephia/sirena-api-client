=begin
#Sirena API

#Sirena API for lead providers and prospect data manipulation

OpenAPI spec version: 1.5.0
Contact: it@getsirena.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class SavingPlanProduct
    # A product make is either the name of its manufacturer or, if the manufacturer has more than one operating unit, the commercial name (brand) of that unit. 
    attr_accessor :make

    # The model of the good, if applicable.
    attr_accessor :model

    # A product detail specific information for a product item
    attr_accessor :detail

    # A stock keeping unit (SKU) is a product and service identification code for a store or product, often portrayed as a machine-readable bar code that helps track the item for inventory. 
    attr_accessor :sku

    attr_accessor :price

    # The type of good the saving plan is for.
    attr_accessor :good_type

    # For example, in the case of a **vehicle**, a subtype may be `car`, `truck` or `motorcycle`. If the good type is **property**, the subtypes may be `house`, `apartment`, `land`, etc.
    attr_accessor :good_sub_type

    # The brand of the good, if applicable.
    attr_accessor :brand

    # A description of the good the saving plan is for.
    attr_accessor :description

    # The type of saving plan.
    attr_accessor :plan_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'make' => :'make',
        :'model' => :'model',
        :'detail' => :'detail',
        :'sku' => :'sku',
        :'price' => :'price',
        :'good_type' => :'goodType',
        :'good_sub_type' => :'goodSubType',
        :'brand' => :'brand',
        :'description' => :'description',
        :'plan_type' => :'planType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'make' => :'String',
        :'model' => :'String',
        :'detail' => :'String',
        :'sku' => :'String',
        :'price' => :'MoneyAmount',
        :'good_type' => :'String',
        :'good_sub_type' => :'String',
        :'brand' => :'String',
        :'description' => :'String',
        :'plan_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'detail')
        self.detail = attributes[:'detail']
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'goodType')
        self.good_type = attributes[:'goodType']
      end

      if attributes.has_key?(:'goodSubType')
        self.good_sub_type = attributes[:'goodSubType']
      end

      if attributes.has_key?(:'brand')
        self.brand = attributes[:'brand']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'planType')
        self.plan_type = attributes[:'planType']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      good_type_validator = EnumAttributeValidator.new('String', ["vehicle", "property", "loan", "other"])
      return false unless good_type_validator.valid?(@good_type)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] good_type Object to be assigned
    def good_type=(good_type)
      validator = EnumAttributeValidator.new('String', ["vehicle", "property", "loan", "other"])
      unless validator.valid?(good_type)
        fail ArgumentError, "invalid value for 'good_type', must be one of #{validator.allowable_values}."
      end
      @good_type = good_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          make == o.make &&
          model == o.model &&
          detail == o.detail &&
          sku == o.sku &&
          price == o.price &&
          good_type == o.good_type &&
          good_sub_type == o.good_sub_type &&
          brand == o.brand &&
          description == o.description &&
          plan_type == o.plan_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [make, model, detail, sku, price, good_type, good_sub_type, brand, description, plan_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
