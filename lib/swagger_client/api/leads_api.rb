=begin
#Sirena API

#Sirena API for lead providers and prospect data manipulation

OpenAPI spec version: 1.5.0
Contact: it@getsirena.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class LeadsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Returns information about the lead categories available for lead creation in each industry. The response includes the name and other details about each category. The default category is returned first.
    # @param [Hash] opts the optional parameters
    # @return [CategoriesByIndustry]
    def get_categories(opts = {})
      data, _status_code, _headers = get_categories_with_http_info(opts)
      return data
    end

    # 
    # Returns information about the lead categories available for lead creation in each industry. The response includes the name and other details about each category. The default category is returned first.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoriesByIndustry, Fixnum, Hash)>] CategoriesByIndustry data, response status code and response headers
    def get_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.get_categories ..."
      end
      # resource path
      local_var_path = "/leads/categories"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CategoriesByIndustry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns information about the applicable defaults for lead creation. These defaults are only used if no value is specified when creating a lead. The response includes the default currency and category (by industry). Note that the default category can also be found using the Categories endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Defaults]
    def get_defaults(opts = {})
      data, _status_code, _headers = get_defaults_with_http_info(opts)
      return data
    end

    # 
    # Returns information about the applicable defaults for lead creation. These defaults are only used if no value is specified when creating a lead. The response includes the default currency and category (by industry). Note that the default category can also be found using the Categories endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Defaults, Fixnum, Hash)>] Defaults data, response status code and response headers
    def get_defaults_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.get_defaults ..."
      end
      # resource path
      local_var_path = "/leads/defaults"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Defaults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#get_defaults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Prospect]
    def new_insurance_lead(lead, opts = {})
      data, _status_code, _headers = new_insurance_lead_with_http_info(lead, opts)
      return data
    end

    # 
    # Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Prospect, Fixnum, Hash)>] Prospect data, response status code and response headers
    def new_insurance_lead_with_http_info(lead, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.new_insurance_lead ..."
      end
      # verify the required parameter 'lead' is set
      if @api_client.config.client_side_validation && lead.nil?
        fail ArgumentError, "Missing the required parameter 'lead' when calling LeadsApi.new_insurance_lead"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/lead/insurance"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lead)
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prospect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#new_insurance_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Saving real estate indrustry only. Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Prospect]
    def new_real_estate_lead(lead, opts = {})
      data, _status_code, _headers = new_real_estate_lead_with_http_info(lead, opts)
      return data
    end

    # 
    # Saving real estate indrustry only. Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Prospect, Fixnum, Hash)>] Prospect data, response status code and response headers
    def new_real_estate_lead_with_http_info(lead, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.new_real_estate_lead ..."
      end
      # verify the required parameter 'lead' is set
      if @api_client.config.client_side_validation && lead.nil?
        fail ArgumentError, "Missing the required parameter 'lead' when calling LeadsApi.new_real_estate_lead"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/lead/real-estate"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lead)
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prospect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#new_real_estate_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Prospect]
    def new_retail_lead(lead, opts = {})
      data, _status_code, _headers = new_retail_lead_with_http_info(lead, opts)
      return data
    end

    # 
    # Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Prospect, Fixnum, Hash)>] Prospect data, response status code and response headers
    def new_retail_lead_with_http_info(lead, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.new_retail_lead ..."
      end
      # verify the required parameter 'lead' is set
      if @api_client.config.client_side_validation && lead.nil?
        fail ArgumentError, "Missing the required parameter 'lead' when calling LeadsApi.new_retail_lead"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/lead/retail"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lead)
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prospect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#new_retail_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Saving plan industry only. Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Prospect]
    def new_saving_plan_lead(lead, opts = {})
      data, _status_code, _headers = new_saving_plan_lead_with_http_info(lead, opts)
      return data
    end

    # 
    # Saving plan industry only. Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Prospect, Fixnum, Hash)>] Prospect data, response status code and response headers
    def new_saving_plan_lead_with_http_info(lead, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.new_saving_plan_lead ..."
      end
      # verify the required parameter 'lead' is set
      if @api_client.config.client_side_validation && lead.nil?
        fail ArgumentError, "Missing the required parameter 'lead' when calling LeadsApi.new_saving_plan_lead"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/lead/saving-plan"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lead)
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prospect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#new_saving_plan_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Vehicle industry only. Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Prospect]
    def new_vehicle_lead(lead, opts = {})
      data, _status_code, _headers = new_vehicle_lead_with_http_info(lead, opts)
      return data
    end

    # 
    # Vehicle industry only. Processes lead data and returns the matching prospect. If the prospect already exists, previous lead data will not be returned.
    # @param lead 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Prospect, Fixnum, Hash)>] Prospect data, response status code and response headers
    def new_vehicle_lead_with_http_info(lead, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LeadsApi.new_vehicle_lead ..."
      end
      # verify the required parameter 'lead' is set
      if @api_client.config.client_side_validation && lead.nil?
        fail ArgumentError, "Missing the required parameter 'lead' when calling LeadsApi.new_vehicle_lead"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/lead/vehicle"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lead)
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prospect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#new_vehicle_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
