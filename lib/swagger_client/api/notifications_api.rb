=begin
#Sirena API

#Sirena API for lead providers and prospect data manipulation

OpenAPI spec version: 1.5.0
Contact: it@getsirena.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class NotificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Deactivates a subscription by its ID
    # @param subscription_id The id of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Subscription]
    def deactivate_subscription(subscription_id, opts = {})
      data, _status_code, _headers = deactivate_subscription_with_http_info(subscription_id, opts)
      return data
    end

    # 
    # Deactivates a subscription by its ID
    # @param subscription_id The id of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def deactivate_subscription_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.deactivate_subscription ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling NotificationsApi.deactivate_subscription"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/^[a-z0-9]{24}$/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling NotificationsApi.deactivate_subscription, must conform to the pattern /^[a-z0-9]{24}$/."
      end

      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/notifications/subscription/{subscriptionId}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#deactivate_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns an active notification subscription by its ID
    # @param subscription_id The id of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Subscription]
    def get_active_subscription_by_id(subscription_id, opts = {})
      data, _status_code, _headers = get_active_subscription_by_id_with_http_info(subscription_id, opts)
      return data
    end

    # 
    # Returns an active notification subscription by its ID
    # @param subscription_id The id of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def get_active_subscription_by_id_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_active_subscription_by_id ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling NotificationsApi.get_active_subscription_by_id"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/^[a-z0-9]{24}$/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling NotificationsApi.get_active_subscription_by_id, must conform to the pattern /^[a-z0-9]{24}$/."
      end

      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/notifications/subscription/{subscriptionId}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_active_subscription_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the list of active subscriptions. Note that subscriptions are currently limited to one per group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Subscriptions]
    def get_active_subscriptions(opts = {})
      data, _status_code, _headers = get_active_subscriptions_with_http_info(opts)
      return data
    end

    # 
    # Returns the list of active subscriptions. Note that subscriptions are currently limited to one per group.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Subscriptions, Fixnum, Hash)>] Subscriptions data, response status code and response headers
    def get_active_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_active_subscriptions ..."
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/notifications/subscriptions"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscriptions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_active_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns information about the available notification topics. Topics can be subscribed to using Subscriptions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Topics]
    def get_topics(opts = {})
      data, _status_code, _headers = get_topics_with_http_info(opts)
      return data
    end

    # 
    # Returns information about the available notification topics. Topics can be subscribed to using Subscriptions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Topics, Fixnum, Hash)>] Topics data, response status code and response headers
    def get_topics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_topics ..."
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/notifications/topics"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Topics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_topics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Subscribe to notification topics. Note that subscriptions are currently limited to one per group, and subscribing twice will result in the first subscription being deactivated.
    # @param subscription 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Subscription]
    def new_subscription(subscription, opts = {})
      data, _status_code, _headers = new_subscription_with_http_info(subscription, opts)
      return data
    end

    # 
    # Subscribe to notification topics. Note that subscriptions are currently limited to one per group, and subscribing twice will result in the first subscription being deactivated.
    # @param subscription 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header.
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def new_subscription_with_http_info(subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.new_subscription ..."
      end
      # verify the required parameter 'subscription' is set
      if @api_client.config.client_side_validation && subscription.nil?
        fail ArgumentError, "Missing the required parameter 'subscription' when calling NotificationsApi.new_subscription"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['csv', 'json'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of csv, json'
      end
      # resource path
      local_var_path = "/notifications/subscriptions"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subscription)
      auth_names = ['ApiKey', 'OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#new_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
