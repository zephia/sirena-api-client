<?php
/**
 * QuotesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers and prospect data manipulation
 *
 * OpenAPI spec version: 1.5.0
 * Contact: it@getsirena.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * QuotesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuotesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return QuotesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getProspectQuotes
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quotes
     */
    public function getProspectQuotes($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        list($response) = $this->getProspectQuotesWithHttpInfo($prospect_id, $format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);
        return $response;
    }

    /**
     * Operation getProspectQuotesWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quotes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectQuotesWithHttpInfo($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getProspectQuotes');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling QuotesApi.getProspectQuotes, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($accepted_before !== null) {
            $queryParams['acceptedBefore'] = $this->apiClient->getSerializer()->toQueryValue($accepted_before);
        }
        // query params
        if ($accepted_after !== null) {
            $queryParams['acceptedAfter'] = $this->apiClient->getSerializer()->toQueryValue($accepted_after);
        }
        // query params
        if ($rejected_before !== null) {
            $queryParams['rejectedBefore'] = $this->apiClient->getSerializer()->toQueryValue($rejected_before);
        }
        // query params
        if ($rejected_after !== null) {
            $queryParams['rejectedAfter'] = $this->apiClient->getSerializer()->toQueryValue($rejected_after);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quotes',
                '/prospect/{prospectId}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quotes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quotes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuoteById
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quote
     */
    public function getQuoteById($prospect_id, $quote_id, $format = null)
    {
        list($response) = $this->getQuoteByIdWithHttpInfo($prospect_id, $quote_id, $format);
        return $response;
    }

    /**
     * Operation getQuoteByIdWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuoteByIdWithHttpInfo($prospect_id, $quote_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getQuoteById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling QuotesApi.getQuoteById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote_id when calling getQuoteById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $quote_id)) {
            throw new \InvalidArgumentException("invalid value for \"quote_id\" when calling QuotesApi.getQuoteById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quote/{quoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "quoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quote',
                '/prospect/{prospectId}/quote/{quoteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quote', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuotes
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quotes
     */
    public function getQuotes($format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        list($response) = $this->getQuotesWithHttpInfo($format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);
        return $response;
    }

    /**
     * Operation getQuotesWithHttpInfo
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quotes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuotesWithHttpInfo($format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        // parse inputs
        $resourcePath = "/prospects/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($accepted_before !== null) {
            $queryParams['acceptedBefore'] = $this->apiClient->getSerializer()->toQueryValue($accepted_before);
        }
        // query params
        if ($accepted_after !== null) {
            $queryParams['acceptedAfter'] = $this->apiClient->getSerializer()->toQueryValue($accepted_after);
        }
        // query params
        if ($rejected_before !== null) {
            $queryParams['rejectedBefore'] = $this->apiClient->getSerializer()->toQueryValue($rejected_before);
        }
        // query params
        if ($rejected_after !== null) {
            $queryParams['rejectedAfter'] = $this->apiClient->getSerializer()->toQueryValue($rejected_after);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quotes',
                '/prospects/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quotes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quotes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation newProspectQuote
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param \Swagger\Client\Model\NewQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quote
     */
    public function newProspectQuote($prospect_id, $quote, $format = null)
    {
        list($response) = $this->newProspectQuoteWithHttpInfo($prospect_id, $quote, $format);
        return $response;
    }

    /**
     * Operation newProspectQuoteWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param \Swagger\Client\Model\NewQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function newProspectQuoteWithHttpInfo($prospect_id, $quote, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling newProspectQuote');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling QuotesApi.newProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote' is set
        if ($quote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote when calling newProspectQuote');
        }
        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($quote)) {
            $_tempBody = $quote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quote',
                '/prospect/{prospectId}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quote', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProspectQuote
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param \Swagger\Client\Model\UpdateQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quote
     */
    public function updateProspectQuote($prospect_id, $quote_id, $quote, $format = null)
    {
        list($response) = $this->updateProspectQuoteWithHttpInfo($prospect_id, $quote_id, $quote, $format);
        return $response;
    }

    /**
     * Operation updateProspectQuoteWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param \Swagger\Client\Model\UpdateQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProspectQuoteWithHttpInfo($prospect_id, $quote_id, $quote, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling updateProspectQuote');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling QuotesApi.updateProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote_id when calling updateProspectQuote');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $quote_id)) {
            throw new \InvalidArgumentException("invalid value for \"quote_id\" when calling QuotesApi.updateProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote' is set
        if ($quote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote when calling updateProspectQuote');
        }
        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quote/{quoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "quoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($quote)) {
            $_tempBody = $quote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quote',
                '/prospect/{prospectId}/quote/{quoteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quote', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
