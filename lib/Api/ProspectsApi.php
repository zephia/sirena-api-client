<?php
/**
 * ProspectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers and prospect data manipulation
 *
 * OpenAPI spec version: 1.5.0
 * Contact: it@getsirena.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ProspectsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProspectsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ProspectsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteProspect
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Prospect
     */
    public function deleteProspect($prospect_id, $format = null)
    {
        list($response) = $this->deleteProspectWithHttpInfo($prospect_id, $format);
        return $response;
    }

    /**
     * Operation deleteProspectWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Prospect, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProspectWithHttpInfo($prospect_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling deleteProspect');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.deleteProspect, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Prospect',
                '/prospect/{prospectId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Prospect', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Prospect', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInteractionById
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $interaction_id The id of the interaction (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Interaction
     */
    public function getInteractionById($prospect_id, $interaction_id, $format = null)
    {
        list($response) = $this->getInteractionByIdWithHttpInfo($prospect_id, $interaction_id, $format);
        return $response;
    }

    /**
     * Operation getInteractionByIdWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $interaction_id The id of the interaction (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Interaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInteractionByIdWithHttpInfo($prospect_id, $interaction_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getInteractionById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getInteractionById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'interaction_id' is set
        if ($interaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $interaction_id when calling getInteractionById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $interaction_id)) {
            throw new \InvalidArgumentException("invalid value for \"interaction_id\" when calling ProspectsApi.getInteractionById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}/interaction/{interactionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($interaction_id !== null) {
            $resourcePath = str_replace(
                "{" . "interactionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($interaction_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Interaction',
                '/prospect/{prospectId}/interaction/{interactionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Interaction', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Interaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInteractions
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $agent The id of the agent to filter (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_after The start date to filter interactions by their creation date (optional)
     * @param \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter) (optional)
     * @param \DateTime $created_before The end date to filter interactions by their creation date (optional)
     * @param \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Interactions
     */
    public function getInteractions($format = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null)
    {
        list($response) = $this->getInteractionsWithHttpInfo($format, $agent, $status, $created_after, $start, $created_before, $end);
        return $response;
    }

    /**
     * Operation getInteractionsWithHttpInfo
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $agent The id of the agent to filter (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_after The start date to filter interactions by their creation date (optional)
     * @param \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter) (optional)
     * @param \DateTime $created_before The end date to filter interactions by their creation date (optional)
     * @param \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Interactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInteractionsWithHttpInfo($format = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null)
    {
        // parse inputs
        $resourcePath = "/prospects/interactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($agent !== null) {
            $queryParams['agent'] = $this->apiClient->getSerializer()->toQueryValue($agent);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Interactions',
                '/prospects/interactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Interactions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Interactions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProspectById
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Prospect
     */
    public function getProspectById($prospect_id, $format = null)
    {
        list($response) = $this->getProspectByIdWithHttpInfo($prospect_id, $format);
        return $response;
    }

    /**
     * Operation getProspectByIdWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Prospect, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectByIdWithHttpInfo($prospect_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getProspectById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Prospect',
                '/prospect/{prospectId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Prospect', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Prospect', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProspectInteractions
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter interactions (optional)
     * @param \DateTime $created_after The start date to filter interactions by their creation date (optional)
     * @param \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter) (optional)
     * @param \DateTime $created_before @deprecated - use createdBefore The end date to filter interactions by their creation date (optional)
     * @param \DateTime $end The end date to filter interactions by their creation date (alias of createdBefore) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Interactions
     */
    public function getProspectInteractions($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null)
    {
        list($response) = $this->getProspectInteractionsWithHttpInfo($prospect_id, $format, $status, $created_after, $start, $created_before, $end);
        return $response;
    }

    /**
     * Operation getProspectInteractionsWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter interactions (optional)
     * @param \DateTime $created_after The start date to filter interactions by their creation date (optional)
     * @param \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter) (optional)
     * @param \DateTime $created_before @deprecated - use createdBefore The end date to filter interactions by their creation date (optional)
     * @param \DateTime $end The end date to filter interactions by their creation date (alias of createdBefore) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Interactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectInteractionsWithHttpInfo($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getProspectInteractions');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectInteractions, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}/interactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Interactions',
                '/prospect/{prospectId}/interactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Interactions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Interactions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProspectQuotes
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quotes
     */
    public function getProspectQuotes($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        list($response) = $this->getProspectQuotesWithHttpInfo($prospect_id, $format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);
        return $response;
    }

    /**
     * Operation getProspectQuotesWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quotes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectQuotesWithHttpInfo($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getProspectQuotes');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectQuotes, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($accepted_before !== null) {
            $queryParams['acceptedBefore'] = $this->apiClient->getSerializer()->toQueryValue($accepted_before);
        }
        // query params
        if ($accepted_after !== null) {
            $queryParams['acceptedAfter'] = $this->apiClient->getSerializer()->toQueryValue($accepted_after);
        }
        // query params
        if ($rejected_before !== null) {
            $queryParams['rejectedBefore'] = $this->apiClient->getSerializer()->toQueryValue($rejected_before);
        }
        // query params
        if ($rejected_after !== null) {
            $queryParams['rejectedAfter'] = $this->apiClient->getSerializer()->toQueryValue($rejected_after);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quotes',
                '/prospect/{prospectId}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quotes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quotes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProspects
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param string $category The category to filter prospects (optional)
     * @param string $status The status to filter prospects (optional)
     * @param string $agent The id of an agent to filter prospects (optional)
     * @param \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter) (optional)
     * @param \DateTime $created_before The end date to filter prospects by their creation date (optional)
     * @param \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore) (optional)
     * @param \DateTime $claimed_after The start date to filter prospects by their claim date (optional)
     * @param \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter) (optional)
     * @param \DateTime $claimed_before The end date to filter prospects by their claim date (optional)
     * @param \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore) (optional)
     * @param string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60; * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Prospects
     */
    public function getProspects($format = null, $search = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $additional_data = null)
    {
        list($response) = $this->getProspectsWithHttpInfo($format, $search, $category, $status, $agent, $created_after, $start, $created_before, $end, $claimed_after, $claim_start, $claimed_before, $claim_end, $additional_data);
        return $response;
    }

    /**
     * Operation getProspectsWithHttpInfo
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param string $category The category to filter prospects (optional)
     * @param string $status The status to filter prospects (optional)
     * @param string $agent The id of an agent to filter prospects (optional)
     * @param \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter) (optional)
     * @param \DateTime $created_before The end date to filter prospects by their creation date (optional)
     * @param \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore) (optional)
     * @param \DateTime $claimed_after The start date to filter prospects by their claim date (optional)
     * @param \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter) (optional)
     * @param \DateTime $claimed_before The end date to filter prospects by their claim date (optional)
     * @param \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore) (optional)
     * @param string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60; * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Prospects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectsWithHttpInfo($format = null, $search = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $additional_data = null)
    {
        if (!is_null($agent) && !preg_match("/^[a-z0-9]{24}$/", $agent)) {
            throw new \InvalidArgumentException("invalid value for \"agent\" when calling ProspectsApi.getProspects, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($agent !== null) {
            $queryParams['agent'] = $this->apiClient->getSerializer()->toQueryValue($agent);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if ($claimed_after !== null) {
            $queryParams['claimedAfter'] = $this->apiClient->getSerializer()->toQueryValue($claimed_after);
        }
        // query params
        if ($claim_start !== null) {
            $queryParams['claimStart'] = $this->apiClient->getSerializer()->toQueryValue($claim_start);
        }
        // query params
        if ($claimed_before !== null) {
            $queryParams['claimedBefore'] = $this->apiClient->getSerializer()->toQueryValue($claimed_before);
        }
        // query params
        if ($claim_end !== null) {
            $queryParams['claimEnd'] = $this->apiClient->getSerializer()->toQueryValue($claim_end);
        }
        // query params
        if (is_array($additional_data)) {
            $additional_data = $this->apiClient->getSerializer()->serializeCollection($additional_data, 'csv', true);
        }
        if ($additional_data !== null) {
            $queryParams['additionalData'] = $this->apiClient->getSerializer()->toQueryValue($additional_data);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Prospects',
                '/prospects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Prospects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Prospects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuoteById
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quote
     */
    public function getQuoteById($prospect_id, $quote_id, $format = null)
    {
        list($response) = $this->getQuoteByIdWithHttpInfo($prospect_id, $quote_id, $format);
        return $response;
    }

    /**
     * Operation getQuoteByIdWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuoteByIdWithHttpInfo($prospect_id, $quote_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling getQuoteById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getQuoteById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote_id when calling getQuoteById');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $quote_id)) {
            throw new \InvalidArgumentException("invalid value for \"quote_id\" when calling ProspectsApi.getQuoteById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quote/{quoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "quoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quote',
                '/prospect/{prospectId}/quote/{quoteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quote', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuotes
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quotes
     */
    public function getQuotes($format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        list($response) = $this->getQuotesWithHttpInfo($format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);
        return $response;
    }

    /**
     * Operation getQuotesWithHttpInfo
     *
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param string $status The status to filter (optional)
     * @param \DateTime $created_before The start date to filter quotes by their creation date (optional)
     * @param \DateTime $created_after The end date to filter quotes by their creation date (optional)
     * @param \DateTime $accepted_before The start date to filter quotes by their accepted date (optional)
     * @param \DateTime $accepted_after The end date to filter quotes by their accepted date (optional)
     * @param \DateTime $rejected_before The start date to filter quotes by their rejected date (optional)
     * @param \DateTime $rejected_after The end date to filter quotes by their rejected date (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quotes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuotesWithHttpInfo($format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        // parse inputs
        $resourcePath = "/prospects/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = $this->apiClient->getSerializer()->toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = $this->apiClient->getSerializer()->toQueryValue($created_after);
        }
        // query params
        if ($accepted_before !== null) {
            $queryParams['acceptedBefore'] = $this->apiClient->getSerializer()->toQueryValue($accepted_before);
        }
        // query params
        if ($accepted_after !== null) {
            $queryParams['acceptedAfter'] = $this->apiClient->getSerializer()->toQueryValue($accepted_after);
        }
        // query params
        if ($rejected_before !== null) {
            $queryParams['rejectedBefore'] = $this->apiClient->getSerializer()->toQueryValue($rejected_before);
        }
        // query params
        if ($rejected_after !== null) {
            $queryParams['rejectedAfter'] = $this->apiClient->getSerializer()->toQueryValue($rejected_after);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quotes',
                '/prospects/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quotes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quotes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation newProspectQuote
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param \Swagger\Client\Model\NewQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quote
     */
    public function newProspectQuote($prospect_id, $quote, $format = null)
    {
        list($response) = $this->newProspectQuoteWithHttpInfo($prospect_id, $quote, $format);
        return $response;
    }

    /**
     * Operation newProspectQuoteWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param \Swagger\Client\Model\NewQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function newProspectQuoteWithHttpInfo($prospect_id, $quote, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling newProspectQuote');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.newProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote' is set
        if ($quote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote when calling newProspectQuote');
        }
        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($quote)) {
            $_tempBody = $quote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quote',
                '/prospect/{prospectId}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quote', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProspectQuote
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param \Swagger\Client\Model\UpdateQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Quote
     */
    public function updateProspectQuote($prospect_id, $quote_id, $quote, $format = null)
    {
        list($response) = $this->updateProspectQuoteWithHttpInfo($prospect_id, $quote_id, $quote, $format);
        return $response;
    }

    /**
     * Operation updateProspectQuoteWithHttpInfo
     *
     * @param string $prospect_id The id of the prospect (required)
     * @param string $quote_id The id of the quote (required)
     * @param \Swagger\Client\Model\UpdateQuote $quote  (required)
     * @param string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProspectQuoteWithHttpInfo($prospect_id, $quote_id, $quote, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prospect_id when calling updateProspectQuote');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.updateProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote_id when calling updateProspectQuote');
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $quote_id)) {
            throw new \InvalidArgumentException("invalid value for \"quote_id\" when calling ProspectsApi.updateProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote' is set
        if ($quote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quote when calling updateProspectQuote');
        }
        // parse inputs
        $resourcePath = "/prospect/{prospectId}/quote/{quoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/csv', 'text/plain']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                "{" . "prospectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "quoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($quote)) {
            $_tempBody = $quote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Quote',
                '/prospect/{prospectId}/quote/{quoteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Quote', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Quote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
